@model IEnumerable<AstroSafar.Models.Book>

@{
    ViewData["Title"] = "Explore Space Books";
    var wishlistBookIds = ViewBag.WishlistBookIds as List<int> ?? new List<int>();
}

<!-- Bootstrap Icons and Font Awesome CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<style>
    :root {
        --space-bg: #f2f7ff;
        --card-bg: #ffffff;
        --primary-blue: #3a7bd5;
        --cosmic-green: #28a745;
        --glow-effect: rgba(58, 123, 213, 0.15);
        --card-radius: 16px;
        --text-dark: #222;
        --text-light: #777;
        --highlight-color: #fff8d8;
    }

    h2 {
        color: #007bff;
        text-align: center;
        font-weight: bold;
        margin-bottom: 20px;
    }


    body {
        background: var(--space-bg);
        font-family: 'Poppins', sans-serif;
        color: var(--text-dark);
    }

    .input-group {
        max-width: 650px;
        margin: 0 auto 2rem;
        box-shadow: 0 6px 12px rgba(0,0,0,0.05);
        border-radius: 8px;
        overflow: hidden;
    }

    .input-group-text {
        background-color: var(--primary-blue);
        color: white;
        border: none;
    }

    .book-card {
        transition: all 0.35s ease-in-out;
        will-change: transform;
        margin-bottom: 1.5rem;
    }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px var(--glow-effect);
        }

    .card {
        border: none;
        border-radius: var(--card-radius);
        background: var(--card-bg);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        height: 100%;
        transition: box-shadow 0.3s;
    }

    /* Update these styles in your CSS section */
    :root {
        /* Keep your existing color variables */
        --card-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Book card container */
    .book-card {
        transition: all 0.25s ease-in-out;
        margin-bottom: 1.25rem;
    }

        .book-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--card-shadow);
        }

    /* Card styling */
    .card {
        border-radius: 10px;
        overflow: hidden;
        height: 100%;
        border: 1px solid #eaeaea;
    }

    /* Image styling - make it more like a book cover */
    .book-image {
        width: 100%;
        height: 180px; /* Reduced height */
        object-fit: contain; /* Changed from cover to contain to show full book cover */
        padding: 0.75rem;
        background-color: #f9f9f9;
    }

    /* Card body styling */
    .card-body {
        padding: 0.75rem;
    }

    .book-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
        line-height: 1.3;
    }

    .book-author {
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 0.5rem;
    }

    .book-desc {
        font-size: 0.85rem;
        color: #777;
        margin-bottom: 0.75rem;
        /* Limit to 2 lines with ellipsis */
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .book-price {
        font-weight: 600;
        color: #333;
        margin-bottom: 0.75rem;
    }

    /* Button styling */
    .btn {
        font-size: 0.85rem;
        padding: 0.35rem 0.75rem;
        border-radius: 5px;
    }

    /* Wishlist icon positioning */
    .wishlist-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Make buttons more compact */
    .btn-success, .btn-outline-primary {
        padding: 0.4rem 1rem; /* Reduced padding */
        font-size: 0.9rem; /* Smaller font size */
    }

    .highlight {
        background-color: var(--highlight-color);
        font-weight: 600;
        padding: 0 5px;
        border-radius: 4px;
    }

    .btn-success {
        background-color: var(--cosmic-green) !important;
        border: none;
        font-weight: 600;
        transition: background 0.3s ease;
        color: white;
        padding: 0.5rem 1.25rem;
        border-radius: 8px;
    }

        .btn-success:hover {
            background-color: #218838 !important;
        }

    .btn-outline-primary {
        border-radius: 8px;
        padding: 0.5rem 1.25rem;
    }
</style>

<h2 class="text-center mb-4 fw-bold">📚 Explore Astronomy Books</h2>

<!-- Search Bar -->
<div class="input-group mb-3">
    <span class="input-group-text">
        <i class="fas fa-search"></i>
    </span>
    <input type="text" id="searchInput" class="form-control" placeholder="Search books by title, author or description..." onkeyup="debounceFilterBooks()" />
</div>

<form id="antiForgeryForm">
    @Html.AntiForgeryToken()
</form>

<div class="container">
    <div class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-3" id="bookContainer">
        @foreach (var book in Model)
        {
            <div class="col book-card" data-title="@book.Title.ToLower() @book.Author.ToLower() @book.Description.ToLower()">
                <div class="card h-100 shadow-lg border-0 position-relative">

                    <!-- Book Image -->
                    <img src="@book.ImageUrl" class="book-image" alt="@book.Title" />

                    <!-- Wishlist Icon -->
                    <form asp-controller="Store" asp-action="AddToWishlist" method="post" class="position-absolute top-0 end-0 m-2">
                        <input type="hidden" name="id" value="@book.BookId" />
                        <button type="button" class="btn border-0 bg-transparent" onclick="addToWishlist(@book.BookId, this)">
                            <i class="bi @(wishlistBookIds.Contains(book.BookId) ? "bi-heart-fill text-danger" : "bi-heart text-secondary") fs-4"></i>
                        </button>
                    </form>

                    <!-- Alerts -->
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger m-2">@TempData["Error"]</div>
                    }
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success m-2">@TempData["Success"]</div>
                    }
                    @if (TempData["Info"] != null)
                    {
                        <div class="alert alert-info m-2">@TempData["Info"]</div>
                    }

                    <!-- Book Details -->
                    <div class="card-body d-flex flex-column">
                        <h5 class="book-title">@book.Title</h5>
                        <p class="card-text text-muted">Author: @book.Author</p>
                        <p class="book-desc">@book.Description</p>
                        <p class="card-text"><strong>Price:</strong> ₹@book.Price.ToString("0.00")</p>

                        <!-- Buttons -->
                        <div class="mt-auto d-flex justify-content-between align-items-center">
                            @using (Html.BeginForm("AddToCart", "Store", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("id", book.BookId)
                                <button type="submit" class="btn btn-success btn-sm">Add to Cart</button>
                            }

                            @*                             <a href="@Url.Action("Checkout", "Store", new { id = book.BookId })" class="btn btn-outline-primary btn-sm">Buy Now</a>
                        *@

                            <form asp-action="BuyNow" asp-controller="Store" method="post">
                                <input type="hidden" name="bookId" value="@book.BookId" />
                                <button type="submit" class="btn btn-primary">Buy Now</button>
                            </form>
                        </div>
                    </div>

                </div>
            </div>

        }
    </div>
    <!-- No Books Found Message -->
    <p id="noResults" class="text-center text-danger mt-3" style="display: none;">🚫 No matching books found.</p>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let debounceTimer;

    function debounceFilterBooks() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(filterBooks, 300); // Delay for better performance
    }

    function filterBooks() {
        let input = document.getElementById("searchInput").value.toLowerCase();
        let books = document.querySelectorAll(".book-card");
        let noResultsMessage = document.getElementById("noResults");
        let found = false;

        books.forEach(book => {
            let bookData = book.getAttribute("data-title");
            let titleElement = book.querySelector(".book-title");
            let authorElement = book.querySelector(".text-muted");
            let descElement = book.querySelector(".book-desc");

            if (bookData.includes(input)) {
                book.style.display = "block"; // Show matching books
                highlightText(titleElement, input);
                highlightText(authorElement, input);
                highlightText(descElement, input);
                found = true;
            } else {
                book.style.display = "none"; // Hide non-matching books
            }
        });

        // Show "No Books Found" message if none are displayed
        noResultsMessage.style.display = found ? "none" : "block";
    }

    function highlightText(element, keyword) {
        if (!element || !keyword) {
            return;
        }

        let regex = new RegExp(`(${keyword})`, "gi");
        element.innerHTML = element.textContent.replace(regex, '<span class="highlight">$1</span>');
    }

    function addToWishlist(bookId, button) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const icon = button.querySelector('i');
        const isInWishlist = icon.classList.contains("bi-heart-fill");

        const url = isInWishlist ? '/Store/RemoveFromWishlist' : '/Store/AddToWishlist';
        const actionText = isInWishlist ? 'Removed from wishlist!' : 'Added to wishlist!';

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ BookId: bookId })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    icon.classList.toggle("bi-heart");
                    icon.classList.toggle("bi-heart-fill");
                    icon.classList.toggle("text-danger");

                    Swal.fire({
                        icon: 'success',
                        title: actionText,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: 'info',
                        title: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Something went wrong.',
                    text: 'Please try again later.'
                });
            });
    }
</script>