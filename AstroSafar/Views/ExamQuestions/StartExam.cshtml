

@model AstroSafar.Models.ExamQuestionsViewModel
@{
    ViewBag.Title = "AstroSafar Exam | Space Learning";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&family=Exo+2:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        :root {
            --space-light: #f0f5ff;
            --deep-sky: #e6f0ff;
            --nebula-purple-light: #c5b3dd;
            --cosmic-blue-light: #6699cc;
            --star-color: #4d94ff;
            --meteor-orange-light: #ff9966;
            --moon-silver: #e6e6e6;
            --planet-ring-light: rgba(102, 153, 204, 0.15);
        }

        body {
            background: linear-gradient(135deg, var(--space-light) 0%, var(--deep-sky) 100%);
            color: #333;
            font-family: 'Exo 2', sans-serif;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: radial-gradient(2px 2px at 40px 70px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), 
                            radial-gradient(2px 2px at 20px 100px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), 
                            radial-gradient(1px 1px at 90px 40px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), 
                            radial-gradient(1px 1px at 130px 80px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)), 
                            radial-gradient(1px 1px at 160px 120px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0));
            background-repeat: repeat;
            background-size: 200px 200px;
            opacity: 0.3;
            z-index: -1;
            animation: twinkle 8s ease-in-out infinite;
        }

        .planet {
            position: absolute;
            border-radius: 50%;
            filter: blur(1px);
        }

        .planet-1 {
            width: 180px;
            height: 180px;
            background: radial-gradient(circle at 30% 40%, #a3c2f5, #d1e1fa);
            top: 10%;
            right: -60px;
            box-shadow: 0 0 40px rgba(77, 148, 255, 0.2);
        }

        .planet-2 {
            width: 100px;
            height: 100px;
            background: radial-gradient(circle at 30% 40%, #e5c1d5, #f2e1ec);
            bottom: 5%;
            left: -30px;
            box-shadow: 0 0 30px rgba(255, 153, 102, 0.2);
        }

        .planet-ring {
            position: absolute;
            width: 240px;
            height: 50px;
            border-radius: 50%;
            border: 8px solid var(--planet-ring-light);
            top: 60px;
            right: -90px;
            transform: rotate(-20deg);
        }

        .exam-header {
            font-family: 'Orbitron', sans-serif;
            color: #4d5b9e;
            margin-bottom: 1.5rem;
            text-shadow: 0 0 10px rgba(77, 148, 255, 0.3);
        }

        .question-box {
            background-color: rgba(240, 245, 255, 0.8);
            border: 1px solid rgba(102, 153, 204, 0.3);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .form-check-input {
            border: 1px solid var(--cosmic-blue-light);
            width: 1.1em;
            height: 1.1em;
            margin-top: 0.2em;
        }

        .form-check-input:checked {
            background-color: var(--cosmic-blue-light);
            border-color: var(--cosmic-blue-light);
        }

        .form-check-label {
            cursor: pointer;
            margin-left: 5px;
        }

        .badge {
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
            background-color: var(--cosmic-blue-light);
        }

        .btn-outline-warning {
            border-color: var(--meteor-orange-light);
            color: var(--meteor-orange-light);
        }

        .btn-outline-warning:hover {
            background-color: var(--meteor-orange-light);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%);
            border: none;
            font-weight: 600;
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 15px rgba(76, 175, 80, 0.3);
        }

        .timer-display {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.1rem;
            color: #d9534f;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 5px 15px;
            border-radius: 20px;
            border: 1px solid rgba(217, 83, 79, 0.3);
        }

        .marks-display {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.1rem;
            color: #4d5b9e;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 5px 15px;
            border-radius: 20px;
            border: 1px solid rgba(77, 91, 158, 0.3);
        }

        @@keyframes twinkle {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <!-- Space elements -->
    <div class="planet planet-1"></div>
    <div class="planet-ring"></div>
    <div class="planet planet-2"></div>

    <div class="exam-container">
        <h2 class="exam-header text-center mb-4">AstroSafar Exam</h2>
        
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="marks-display">
                <i class="bi bi-stars me-2"></i>Total Marks: <span class="fw-bold">@(Model.Questions.Count * 2)</span>
            </div>
            <div class="timer-display">
                <i class="bi bi-clock-history me-2"></i>Time Left: <span id="timer">30:00</span>
            </div>
        </div>

        <form method="post" action="@Url.Action("SubmitExam", "ExamQuestions")" id="examForm">
            <input type="hidden" name="CourseId" value="@Model.CourseId" />
            <input type="hidden" name="TimeRemaining" id="timeRemainingField" value="1800" />

            @if (Model.Questions != null && Model.Questions.Count > 0)
            {
                var optionLabels = new[] { "A", "B", "C", "D", "E", "F" };

                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    <div class="question-box">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <p class="fw-bold mb-0">@(i + 1). @Model.Questions[i].QuestionText</p>
                            <span class="badge"><i class="bi bi-award me-1"></i> 2 Marks</span>
                        </div>

                        @if (Model.Questions[i].QuestionType == "MCQ")
                        {
                            var options = Model.Questions[i].Options?.Split(',') ?? new string[0];

                            <div class="options-container">
                                @for (int j = 0; j < options.Length; j++)
                                {
                                    if (j >= optionLabels.Length) break;

                                    <div class="form-check mb-2">
                                        <input class="form-check-input"
                                               type="radio"
                                               name="userAnswers[@i].SelectedOption"
                                               value="@options[j].Trim()"
                                               required
                                               id="q-@i-@j">
                                        <label class="form-check-label" for="q-@i-@j">
                                            <strong>@optionLabels[j])</strong> @options[j].Trim()
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                        else if (Model.Questions[i].QuestionType == "TrueFalse")
                        {
                            <div class="options-container">
                                <div class="form-check mb-2">
                                    <input class="form-check-input"
                                           type="radio"
                                           name="userAnswers[@i].SelectedOption"
                                           value="True"
                                           required
                                           id="q-@i-true">
                                    <label class="form-check-label" for="q-@i-true">True</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input"
                                           type="radio"
                                           name="userAnswers[@i].SelectedOption"
                                           value="False"
                                           required
                                           id="q-@i-false">
                                    <label class="form-check-label" for="q-@i-false">False</label>
                                </div>
                            </div>
                        }

                        <button type="button" class="btn btn-outline-warning btn-sm mt-2" onclick="clearSelection(@i)">
                            <i class="bi bi-x-circle me-1"></i> Clear Selection
                        </button>

                        <input type="hidden" name="userAnswers[@i].QuestionId" value="@Model.Questions[i].QuestionId">
                    </div>
                }

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-success btn-lg px-5">
                        <i class="bi bi-send-check me-2"></i> Submit Exam
                    </button>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i> No questions available for this exam.
                </div>
            }
        </form>
    </div>

    <script>
        let timeLeft = 30 * 60; // 30 minutes in seconds
        const timerElement = document.getElementById("timer");
        const timeRemainingField = document.getElementById("timeRemainingField");

        function updateTimer() {
            const minutes = Math.floor(timeLeft / 60);
            let seconds = timeLeft % 60;
            timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            timeRemainingField.value = timeLeft;

            if (timeLeft > 0) {
                timeLeft--;
            } else {
                clearInterval(timerInterval);
                document.getElementById("examForm").submit();
            }
        }

        updateTimer();
        const timerInterval = setInterval(updateTimer, 1000);

        function clearSelection(questionIndex) {
            document.querySelectorAll(`input[name="userAnswers[${questionIndex}].SelectedOption"]`)
                .forEach(radio => radio.checked = false);
        }

    </script>
</body>
</html>