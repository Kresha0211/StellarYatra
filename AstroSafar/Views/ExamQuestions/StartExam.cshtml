<form method="post" action="@Url.Action("SubmitExam", "ExamQuestions")" id="examForm">
    <input type="hidden" name="CourseId" value="@Model.CourseId" />
    <input type="hidden" name="TimeRemaining" id="timeRemainingField" value="1800" />

    <div class="container">
        @if (Model.Questions != null && Model.Questions.Count > 0)
        {
            var optionLabels = new[] { "A", "B", "C", "D", "E", "F" }; // Extend if needed

            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                <div class="question-box mb-4 p-3 border rounded">
                    <p class="fw-bold mb-3">@(i + 1). @Model.Questions[i].QuestionText</p>

                    @if (Model.Questions[i].QuestionType == "MCQ")
                    {
                        var options = Model.Questions[i].Options?.Split(',') ?? new string[0];

                        <div class="options-container">
                            @for (int j = 0; j < options.Length; j++)
                            {
                                if (j >= optionLabels.Length) break; // Prevent IndexOutOfRangeException

                                <div class="form-check mb-2">
                                    <input class="form-check-input"
                                           type="radio"
                                           name="userAnswers[@i].SelectedOption"
                                           value="@options[j].Trim()"
                                           required
                                           id="q-@i-@j">
                                    <label class="form-check-label d-flex align-items-center" for="q-@i-@j">
                                        <span class="fw-bold me-2">@optionLabels[j].)</span>
                                        <span>@options[j].Trim()</span>
                                    </label>
                                </div>
                            }
                        </div>
                    }
                    else if (Model.Questions[i].QuestionType == "TrueFalse")
                    {
                        <div class="options-container">
                            <div class="form-check mb-2">
                                <input class="form-check-input"
                                       type="radio"
                                       name="userAnswers[@i].SelectedOption"
                                       value="True"
                                       required
                                       id="q-@i-true">
                                <label class="form-check-label" for="q-@i-true">True</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input"
                                       type="radio"
                                       name="userAnswers[@i].SelectedOption"
                                       value="False"
                                       required
                                       id="q-@i-false">
                                <label class="form-check-label" for="q-@i-false">False</label>
                            </div>
                        </div>
                    }

                    <button type="button" class="btn btn-outline-warning btn-sm mt-2" onclick="clearSelection(@i)">
                        <i class="bi bi-x-circle"></i> Clear Selection
                    </button>

                    <input type="hidden" name="userAnswers[@i].QuestionId" value="@Model.Questions[i].QuestionId">
                </div>

                @if (i < Model.Questions.Count - 1)
                {
                    <hr class="my-4" />
                }
            }
        }
        else
        {
            <p class="text-danger">No questions available for this exam.</p>
        }
    </div>

    <div class="text-center mt-4">
        <button type="submit" class="btn btn-success btn-lg px-5">
            <i class="bi bi-send-check"></i> Submit Exam
        </button>
    </div>
</form>

<script>
    // Timer functionality
    let timeLeft = 30 * 60; // 30 minutes in seconds
    const timerElement = document.getElementById("timer");
    const timeRemainingField = document.getElementById("timeRemainingField");

    function updateTimer() {
        const minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

        // Update hidden field with remaining time
        timeRemainingField.value = timeLeft;

        if (timeLeft > 0) {
            timeLeft--;
        } else {
            clearInterval(timerInterval);
            document.getElementById("examForm").submit();
        }
    }

    // Start timer immediately
    updateTimer();
    const timerInterval = setInterval(updateTimer, 1000);

    // Clear selection function
    function clearSelection(questionIndex) {
        document.querySelectorAll(`input[name="userAnswers[${questionIndex}].SelectedOption"]`)
            .forEach(radio => radio.checked = false);
    }

    // Prevent form resubmission on page reload
    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }
</script>