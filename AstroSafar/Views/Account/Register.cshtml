@* @model AstroSafar.Models.Registration

@{
    ViewBag.Title = "Registration";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">

    <style>
        
        body {
            background: url('https://source.unsplash.com/1600x900/?galaxy,universe') no-repeat center center fixed;
            background-size: cover;
            background-color: lavender;
            font-family: 'Poppins', sans-serif;
        }
        .registration-container {
            max-width: 500px; 
            margin: 50px auto; 
            padding: 20px; 
            border: 1px solid #ccc; 
            border-radius: 5px; 
            background-color: white;
 */        }
    </style>
</head>
<body>
    <div class="registration-container">
        <h2 class="text-center">Registration</h2>
        @using (Html.BeginForm())
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Firstname)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Lastname)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Email)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", maxlength = "10", title = "Phone number must be exactly 10 digits" })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
           
            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "form-label" })
                @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput" })
                <span class="toggle-password" id="togglePassword">&#128065;</span> <!-- Eye icon -->
                @Html.ValidationMessageFor(model => model.Password)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "form-label" })
                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", id = "confirmPasswordInput" })
                <span class="toggle-password" id="toggleConfirmPassword">&#128065;</span> <!-- Eye icon -->
                @Html.ValidationMessageFor(model => model.ConfirmPassword)
            </div>

            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>

            <button type="submit" class="btn btn-primary w-100">Register</button> <!-- Full-width button -->
            <div>
                <a asp-action="Login" asp-controller="Account">Already Register? Login</a>
            </div>

        }   
    </div>
   

  
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      
        // Toggle password visibility
        const togglePassword = document.getElementById('togglePassword');
        const passwordInput = document.getElementById('passwordInput');

        togglePassword.addEventListener('click', function () {
            // Toggle the type attribute
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            // Toggle the eye icon
            this.textContent = type === 'password' ? '\u{1F441}' : '\u{1F440}'; // Change icon based on visibility
        });

        // Toggle password visibility for Confirm Password field
        const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
        const confirmPasswordInput = document.getElementById('confirmPasswordInput');

        toggleConfirmPassword.addEventListener('click', function () {
            // Toggle the type attribute
            const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmPasswordInput.setAttribute('type', type);
            // Toggle the eye icon
            this.textContent = type === 'password' ? '\u{1F441}' : '\u{1F440}'; // Change icon based on visibility
        });
        document.addEventListener("DOMContentLoaded", function () {
            const dobInput = document.getElementById("DateOfBirth");
            const today = new Date().toISOString().split("T")[0]; // Get today's date in YYYY-MM-DD format
            dobInput.setAttribute("max", today); 
      

    </script>
</body>
</html>
 

 *@


 @model AstroSafar.Models.Registration

@{
    ViewBag.Title = "Join AstroSafar | Space Learning";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&family=Exo+2:wght@300;400;600&display=swap" rel="stylesheet">

    @* <style>
        :root {
            --space-black: #050714;
            --deep-space: #141e30;
            --nebula-purple: #4a1177;
            --cosmic-blue: #0047AB;
            --star-glow: #00c6ff;
            --meteor-orange: #FF4500;
            --moon-gray: #303030;
            --planet-ring: rgba(65, 184, 250, 0.15);
        }

        body {
            background: linear-gradient(135deg, var(--space-black) 0%, var(--deep-space) 100%);
            color: #fff;
            font-family: 'Exo 2', sans-serif;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(2px 2px at 40px 70px, rgba(255, 255, 255, 0.9), rgba(0, 0, 0, 0)),
                radial-gradient(2px 2px at 20px 100px, rgba(255, 255, 255, 0.9), rgba(0, 0, 0, 0)),
                radial-gradient(1px 1px at 90px 40px, rgba(255, 255, 255, 0.9), rgba(0, 0, 0, 0)),
                radial-gradient(1px 1px at 130px 80px, rgba(255, 255, 255, 0.8), rgba(0, 0, 0, 0)),
                radial-gradient(1px 1px at 160px 120px, rgba(255, 255, 255, 0.8), rgba(0, 0, 0, 0));
            background-repeat: repeat;
            background-size: 200px 200px;
            opacity: 0.3;
            z-index: -1;
        }

        .planet {
            position: absolute;
            border-radius: 50%;
            filter: blur(1px);
        }

        .planet-1 {
            width: 180px;
            height: 180px;
            background: radial-gradient(circle at 30% 40%, #1a3c7e, #0c1e3d);
            top: 10%;
            right: -60px;
            box-shadow: 0 0 40px rgba(0, 198, 255, 0.2);
        }

        .planet-2 {
            width: 100px;
            height: 100px;
            background: radial-gradient(circle at 30% 40%, #6b1f47, #45142f);
            bottom: 5%;
            left: -30px;
            box-shadow: 0 0 30px rgba(255, 69, 0, 0.2);
        }

        .planet-ring {
            position: absolute;
            width: 240px;
            height: 50px;
            border-radius: 50%;
            border: 8px solid var(--planet-ring);
            top: 60px;
            right: -90px;
            transform: rotate(-20deg);
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-weight: 700;
            font-size: 2.5rem;
            color: #fff;
            text-align: center;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 10px rgba(0, 198, 255, 0.7);
        }

        .tagline {
            text-align: center;
            color: #b8b8b8;
            margin-bottom: 2rem;
        }

        .registration-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 30px;
            border-radius: 16px;
            background-color: rgba(20, 30, 48, 0.8);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            z-index: 10;
        }

        .form-label {
            font-weight: 600;
            color: #e0e0e0;
            margin-bottom: 0.3rem;
        }

        .form-control {
            background-color: rgba(30, 40, 60, 0.6);
            color: #fff;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            transition: all 0.3s ease;
            padding: 10px 15px;
        }

        .form-control:focus {
            background-color: rgba(40, 50, 80, 0.7);
            color: #fff;
            border-color: var(--star-glow);
            box-shadow: 0 0 0 0.25rem rgba(0, 198, 255, 0.25);
        }

        .input-group-text {
            background-color: rgba(30, 40, 60, 0.8);
            border-color: rgba(255, 255, 255, 0.1);
            color: #e0e0e0;
        }

        .toggle-password {
            cursor: pointer;
            background-color: transparent;
            border: none;
            color: #e0e0e0;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--cosmic-blue) 0%, var(--nebula-purple) 100%);
            border: none;
            font-weight: 600;
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
            padding: 12px;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 15px rgba(0, 198, 255, 0.3);
            background: linear-gradient(135deg, var(--cosmic-blue) 20%, var(--nebula-purple) 100%);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .text-danger {
            color: var(--meteor-orange) !important;
            font-size: 0.85rem;
            margin-top: 0.3rem;
        }

        a {
            color: var(--star-glow);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        a:hover {
            color: #fff;
            text-shadow: 0 0 8px var(--star-glow);
        }

        /* Password strength indicator */
        .password-strength {
            height: 5px;
            margin-top: 5px;
            border-radius: 3px;
            transition: all 0.3s ease;
        }

        .password-feedback {
            font-size: 0.8rem;
            margin-top: 5px;
        }

       

        body::before {
            animation: twinkle 8s ease-in-out infinite;
        }
    </style> *@

    <style>
        :root {
            --space-light: #f0f5ff;
            --deep-sky: #e6f0ff;
            --nebula-purple-light: #c5b3dd;
            --cosmic-blue-light: #6699cc;
            --star-color: #4d94ff;
            --meteor-orange-light: #ff9966;
            --moon-silver: #e6e6e6;
            --planet-ring-light: rgba(102, 153, 204, 0.15);
        }

        body {
            background: linear-gradient(135deg, var(--space-light) 0%, var(--deep-sky) 100%);
            color: #333;
            font-family: 'Exo 2', sans-serif;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

            body::before {
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: radial-gradient(2px 2px at 40px 70px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(2px 2px at 20px 100px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 90px 40px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 130px 80px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 160px 120px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0));
                background-repeat: repeat;
                background-size: 200px 200px;
                opacity: 0.3;
                z-index: -1;
            }

        .planet {
            position: absolute;
            border-radius: 50%;
            filter: blur(1px);
        }

        .planet-1 {
            width: 180px;
            height: 180px;
            background: radial-gradient(circle at 30% 40%, #a3c2f5, #d1e1fa);
            top: 10%;
            right: -60px;
            box-shadow: 0 0 40px rgba(77, 148, 255, 0.2);
        }

        .planet-2 {
            width: 100px;
            height: 100px;
            background: radial-gradient(circle at 30% 40%, #e5c1d5, #f2e1ec);
            bottom: 5%;
            left: -30px;
            box-shadow: 0 0 30px rgba(255, 153, 102, 0.2);
        }

        .planet-ring {
            position: absolute;
            width: 240px;
            height: 50px;
            border-radius: 50%;
            border: 8px solid var(--planet-ring-light);
            top: 60px;
            right: -90px;
            transform: rotate(-20deg);
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-weight: 700;
            font-size: 2.5rem;
            color: #4d5b9e;
            text-align: center;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 10px rgba(77, 148, 255, 0.7);
        }

        .tagline {
            text-align: center;
            color: #555;
            margin-bottom: 2rem;
        }

        .registration-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 30px;
            border-radius: 16px;
            background-color: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(100, 100, 100, 0.15);
            border: 1px solid rgba(200, 200, 200, 0.3);
            position: relative;
            z-index: 10;
        }

        .form-label {
            font-weight: 600;
            color: #444;
            margin-bottom: 0.3rem;
        }

        .form-control {
            background-color: rgba(240, 245, 255, 0.6);
            color: #333;
            border: 1px solid rgba(102, 153, 204, 0.3);
            border-radius: 8px;
            transition: all 0.3s ease;
            padding: 10px 15px;
        }

            .form-control:focus {
                background-color: rgba(230, 240, 255, 0.7);
                color: #222;
                border-color: var(--star-color);
                box-shadow: 0 0 0 0.25rem rgba(77, 148, 255, 0.25);
            }

        .input-group-text {
            background-color: rgba(230, 240, 255, 0.7);
            border-color: rgba(102, 153, 204, 0.3);
            color: #444;
        }

        .toggle-password {
            cursor: pointer;
            background-color: transparent;
            border: none;
            color: #555;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--cosmic-blue-light) 0%, var(--nebula-purple-light) 100%);
            border: none;
            font-weight: 600;
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
            padding: 12px;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            color: #333;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 7px 15px rgba(77, 148, 255, 0.3);
                background: linear-gradient(135deg, var(--cosmic-blue-light) 20%, var(--nebula-purple-light) 100%);
            }

            .btn-primary:active {
                transform: translateY(0);
            }

        .text-danger {
            color: #e74c3c !important;
            font-size: 0.85rem;
            margin-top: 0.3rem;
        }

        a {
            color: var(--cosmic-blue-light);
            text-decoration: none;
            transition: all 0.3s ease;
        }

            a:hover {
                color: #4d5b9e;
                text-shadow: 0 0 8px rgba(77, 148, 255, 0.5);
            }

        /* Password strength indicator */
        .password-strength {
            height: 5px;
            margin-top: 5px;
            border-radius: 3px;
            transition: all 0.3s ease;
        }

        .password-feedback {
            font-size: 0.8rem;
            margin-top: 5px;
            color: #555;
        }

        body::before {
            animation: twinkle 8s ease-in-out infinite;
        }
    </style>

</head>
<body>
    <!-- Space elements -->
    <div class="planet planet-1"></div>
    <div class="planet-ring"></div>
    <div class="planet planet-2"></div>

    <div class="registration-container">
        <div class="logo">AstroSafar</div>
        <div class="tagline">Begin your journey through the cosmos of knowledge</div>
        
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "registrationForm", @class = "needs-validation", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()
            
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Firstname, new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", required = "required", placeholder = "Enter your first name" })
                        <div class="invalid-feedback">Please enter your first name.</div>
                        @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                    </div>
                   

                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Lastname, new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", required = "required", placeholder = "Enter your last name" })
                        <div class="invalid-feedback">Please enter your last name.</div>
                        @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", type = "email", required = "required", placeholder = "youremail@example.com" })
                </div>
                <div class="invalid-feedback">Please enter a valid email address.</div>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-phone"></i></span>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", maxlength = "10", required = "required", placeholder = "10-digit mobile number" })
                </div>
                <div class="invalid-feedback">Please enter a valid 10-digit phone number.</div>
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput", required = "required", placeholder = "Choose a strong password" })
                    <button class="input-group-text toggle-password" type="button" id="togglePassword"><i class="fa fa-eye"></i></button>
                </div>
                <div class="password-strength" id="passwordStrength"></div>
                <div class="password-feedback" id="passwordFeedback"></div>
                <div class="invalid-feedback">Password is required.</div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", id = "confirmPasswordInput", required = "required", placeholder = "Confirm your password" })
                    <button class="input-group-text toggle-password" type="button" id="toggleConfirmPassword"><i class="fa fa-eye"></i></button>
                </div>
                <div class="invalid-feedback">Please confirm your password.</div>
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>

            <div class="mb-4">
                @Html.LabelFor(model => model.DateOfBirth, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                    @Html.TextBoxFor(model => model.DateOfBirth, new { @class = "form-control", type = "date", required = "required", id = "dobInput" })
                </div>
                <div class="invalid-feedback">Please enter your date of birth.</div>
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>

            <button type="submit" class="btn btn-primary w-100">LAUNCH YOUR JOURNEY</button>
            
            <div class="text-center mt-4">
                Already an explorer? <a asp-action="Login" asp-controller="Account">Sign In</a>
            </div>
        }
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
   @*  
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Form validation
            const form = document.getElementById('registrationForm');
            
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                
                // Check if passwords match
                const password = document.getElementById('passwordInput').value;
                const confirmPassword = document.getElementById('confirmPasswordInput').value;
                
                if (password !== confirmPassword) {
                    event.preventDefault();
                    document.getElementById('confirmPasswordInput').setCustomValidity("Passwords don't match");
                } else {
                    document.getElementById('confirmPasswordInput').setCustomValidity('');
                }
                
                form.classList.add('was-validated');
            });
            
            // Toggle password visibility
            document.getElementById('togglePassword').addEventListener('click', function() {
                const passwordInput = document.getElementById('passwordInput');
                togglePasswordVisibility(passwordInput, this);
            });
            
            document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
                const confirmPasswordInput = document.getElementById('confirmPasswordInput');
                togglePasswordVisibility(confirmPasswordInput, this);
            });
            
            function togglePasswordVisibility(input, button) {
                if (input.type === 'password') {
                    input.type = 'text';
                    button.innerHTML = '<i class="fa fa-eye-slash"></i>';
                } else {
                    input.type = 'password';
                    button.innerHTML = '<i class="fa fa-eye"></i>';
                }
            }
            
            // Set max date for Date of Birth (today)
            document.getElementById('dobInput').setAttribute('max', new Date().toISOString().split('T')[0]);
            
            // Password strength meter
            const passwordInput = document.getElementById('passwordInput');
            const passwordStrength = document.getElementById('passwordStrength');
            const passwordFeedback = document.getElementById('passwordFeedback');
            
            passwordInput.addEventListener('input', function() {
                const password = this.value;
                let strength = 0;
                let feedback = '';
                
                if (password.length === 0) {
                    passwordStrength.style.width = '0%';
                    passwordStrength.style.backgroundColor = '';
                    passwordFeedback.textContent = '';
                    return;
                }
                
                // Length check
                if (password.length >= 8) {
                    strength += 25;
                } else {
                    feedback = 'Password should be at least 8 characters long';
                }
                
                // Uppercase check
                if (/[A-Z]/.test(password)) {
                    strength += 25;
                } else if (!feedback) {
                    feedback = 'Add uppercase letters for stronger password';
                }
                
                // Number check
                if (/[0-9]/.test(password)) {
                    strength += 25;
                } else if (!feedback) {
                    feedback = 'Add numbers for stronger password';
                }
                
                // Special character check
                if (/[^A-Za-z0-9]/.test(password)) {
                    strength += 25;
                } else if (!feedback) {
                    feedback = 'Add special characters for stronger password';
                }
                
                // Update the UI
                passwordStrength.style.width = strength + '%';
                
                if (strength < 25) {
                    passwordStrength.style.backgroundColor = '#ff4500'; // weak
                    if (!feedback) feedback = 'Password is too weak';
                } else if (strength < 50) {
                    passwordStrength.style.backgroundColor = '#ffa500'; // moderate
                    if (!feedback) feedback = 'Password is moderate';
                } else if (strength < 75) {
                    passwordStrength.style.backgroundColor = '#ffff00'; // good
                    if (!feedback) feedback = 'Password is good';
                } else {
                    passwordStrength.style.backgroundColor = '#00ff00'; // strong
                    feedback = 'Password is strong!';
                }
                
                passwordFeedback.textContent = feedback;
            });
            
            // Create floating stars effect
            createStars();
        });
        
        function createStars() {
            const stars = 50;
            const body = document.querySelector('body');
            
            for (let i = 0; i < stars; i++) {
                let star = document.createElement('div');
                star.className = 'star';
                star.style.width = '1px';
                star.style.height = '1px';
                star.style.backgroundColor = 'white';
                star.style.position = 'fixed';
                star.style.top = Math.random() * 100 + 'vh';
                star.style.left = Math.random() * 100 + 'vw';
                star.style.opacity = Math.random();
                star.style.borderRadius = '50%';
                star.style.boxShadow = '0 0 ' + Math.floor(Math.random() * 5) + 'px white';
                star.style.animation = 'twinkle ' + (3 + Math.random() * 7) + 's ease-in-out infinite';
                star.style.animationDelay = Math.random() * 5 + 's';
                
                body.appendChild(star);
            }
        }
    </script> *@
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById('registrationForm');

        form.addEventListener('submit', function (event) {
            let valid = true;

            // Firstname & Lastname Validation (No numbers allowed)
            const namePattern = /^[A-Za-z\s]+$/;
            const firstName = document.getElementById("Firstname");
            const lastName = document.getElementById("Lastname");

            if (!namePattern.test(firstName.value)) {
                firstName.setCustomValidity("First name should only contain letters.");
                valid = false;
            } else {
                firstName.setCustomValidity("");
            }

            if (!namePattern.test(lastName.value)) {
                lastName.setCustomValidity("Last name should only contain letters.");
                valid = false;
            } else {
                lastName.setCustomValidity("");
            }

            // // Email Validation
            // const email = document.getElementById("Email");
            // const emailPattern = /^[a-zA-Z0-9._%+-]+[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            // if (!emailPattern.test(email.value)) {
            //     email.setCustomValidity("Please enter a valid email address.");
            //     valid = false;
            // } else {
            //     email.setCustomValidity("");
            // }

            // Phone Number Validation (Exactly 10 digits)
            const phone = document.getElementById("Phone");
            if (!/^\d{10}$/.test(phone.value)) {
                phone.setCustomValidity("Phone number must be exactly 10 digits.");
                valid = false;
            } else {
                phone.setCustomValidity("");
            }

            // Password Validation (At least 6 characters, 1 uppercase, 1 lowercase, 1 special character)
            const password = document.getElementById("passwordInput");
            const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{6,}$/;
            if (!passwordPattern.test(password.value)) {
                password.setCustomValidity("Password must be at least 6 characters and contain 1 uppercase, 1 lowercase, and 1 special character.");
                valid = false;
            } else {
                password.setCustomValidity("");
            }

            // Confirm Password Validation (Must match password)
            const confirmPassword = document.getElementById("confirmPasswordInput");
            if (password.value !== confirmPassword.value) {
                confirmPassword.setCustomValidity("Passwords do not match.");
                valid = false;
            } else {
                confirmPassword.setCustomValidity("");
            }

            // DOB Validation (Cannot be a future date)
            const dob = document.getElementById("dobInput");
            const today = new Date().toISOString().split('T')[0];
            if (dob.value > today) {
                dob.setCustomValidity("Date of Birth cannot be in the future.");
                valid = false;
            } else {
                dob.setCustomValidity("");
            }

            if (!valid) {
                event.preventDefault();
                event.stopPropagation();
            }

            form.classList.add("was-validated");
        });
    });
</script>

</body>
</html>


@* 
            @model AstroSafar.Models.Registration

@{
    ViewBag.Title = "Registration";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

    <style>
        body {
            background-color: #121212;
            color: #fff;
            font-family: 'Poppins', sans-serif;
        }

        .registration-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 20px;
            border-radius: 10px;
            background-color: #1e1e1e;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
        }

        .form-control {
            background-color: #333;
            color: #fff;
            border: 1px solid #555;
        }

            .form-control:focus {
                background-color: #444;
                color: #fff;
                border-color: #007bff;
            }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #fff;
        }

        .btn-primary {
            background-color: #007bff;
            border: none;
        }

            .btn-primary:hover {
                background-color: #0056b3;
            }

        a {
            color: #007bff;
        }

            a:hover {
                color: #0056b3;
            }
    </style>
</head>
<body>
    <div class="registration-container">
        <h2 class="text-center">Registration</h2>
        @using (Html.BeginForm())
        {
            <div class="mb-3 position-relative">
                @Html.LabelFor(model => model.Firstname, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 position-relative">
                @Html.LabelFor(model => model.Lastname, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 position-relative">
                @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", type = "email", required = "required" })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 position-relative">
                @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", maxlength = "10", required = "required" })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 position-relative">
                @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                <div class="input-group">
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput", required = "required" })
                    <span class="input-group-text toggle-password" id="togglePassword"><i class="fa fa-eye"></i></span>
                </div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 position-relative">
                @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                <div class="input-group">
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", id = "confirmPasswordInput", required = "required" })
                    <span class="input-group-text toggle-password" id="toggleConfirmPassword"><i class="fa fa-eye"></i></span>
                </div>
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3">
                @Html.LabelFor(model => model.DateOfBirth, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.DateOfBirth, new { @class = "form-control", type = "date", required = "required", id = "dobInput" })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>
            <button type="submit" class="btn btn-primary w-100">Register</button>
            <div class="text-center mt-3">
                <a asp-action="Login" asp-controller="Account">Already registered? Login</a>
            </div>
        }
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Toggle password visibility
            document.querySelectorAll(".toggle-password").forEach(item => {
                item.addEventListener("click", function () {
                    const input = this.previousElementSibling;
                    if (input.type === "password") {
                        input.type = "text";
                        this.innerHTML = '<i class="fa fa-eye-slash"></i>';
                    } else {
                        input.type = "password";
                        this.innerHTML = '<i class="fa fa-eye"></i>';
                    }
                });
            });

            // Set max date for Date of Birth
            document.getElementById("dobInput").setAttribute("max", new Date().toISOString().split("T")[0]);
        });
    </script>
</body>
</html>
 *@

                        
 @* @model AstroSafar.Models.Registration

@{
    ViewBag.Title = "Join AstroSafar | Space Learning";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&family=Exo+2:wght@300;400;600&display=swap" rel="stylesheet">

    <style>
        :root {
            --space-light: #f0f5ff;
            --deep-sky: #e6f0ff;
            --nebula-purple-light: #c5b3dd;
            --cosmic-blue-light: #6699cc;
            --star-color: #4d94ff;
            --meteor-orange-light: #ff9966;
            --moon-silver: #e6e6e6;
            --planet-ring-light: rgba(102, 153, 204, 0.15);
        }

        body {
            background: linear-gradient(135deg, var(--space-light) 0%, var(--deep-sky) 100%);
            color: #333;
            font-family: 'Exo 2', sans-serif;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

            body::before {
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: radial-gradient(2px 2px at 40px 70px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(2px 2px at 20px 100px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 90px 40px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 130px 80px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 160px 120px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0));
                background-repeat: repeat;
                background-size: 200px 200px;
                opacity: 0.3;
                z-index: -1;
            }

        .planet {
            position: absolute;
            border-radius: 50%;
            filter: blur(1px);
        }

        .planet-1 {
            width: 180px;
            height: 180px;
            background: radial-gradient(circle at 30% 40%, #a3c2f5, #d1e1fa);
            top: 10%;
            right: -60px;
            box-shadow: 0 0 40px rgba(77, 148, 255, 0.2);
        }

        .planet-2 {
            width: 100px;
            height: 100px;
            background: radial-gradient(circle at 30% 40%, #e5c1d5, #f2e1ec);
            bottom: 5%;
            left: -30px;
            box-shadow: 0 0 30px rgba(255, 153, 102, 0.2);
        }

        .planet-ring {
            position: absolute;
            width: 240px;
            height: 50px;
            border-radius: 50%;
            border: 8px solid var(--planet-ring-light);
            top: 60px;
            right: -90px;
            transform: rotate(-20deg);
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-weight: 700;
            font-size: 2.5rem;
            color: #4d5b9e;
            text-align: center;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 10px rgba(77, 148, 255, 0.7);
        }

        .tagline {
            text-align: center;
            color: #555;
            margin-bottom: 2rem;
        }

        .registration-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 30px;
            border-radius: 16px;
            background-color: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(100, 100, 100, 0.15);
            border: 1px solid rgba(200, 200, 200, 0.3);
            position: relative;
            z-index: 10;
        }

        .form-label {
            font-weight: 600;
            color: #444;
            margin-bottom: 0.3rem;
        }

        .form-control {
            background-color: rgba(240, 245, 255, 0.6);
            color: #333;
            border: 1px solid rgba(102, 153, 204, 0.3);
            border-radius: 8px;
            transition: all 0.3s ease;
            padding: 10px 15px;
        }

            .form-control:focus {
                background-color: rgba(230, 240, 255, 0.7);
                color: #222;
                border-color: var(--star-color);
                box-shadow: 0 0 0 0.25rem rgba(77, 148, 255, 0.25);
            }

        .input-group-text {
            background-color: rgba(230, 240, 255, 0.7);
            border-color: rgba(102, 153, 204, 0.3);
            color: #444;
        }

        .toggle-password {
            cursor: pointer;
            background-color: transparent;
            border: none;
            color: #555;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--cosmic-blue-light) 0%, var(--nebula-purple-light) 100%);
            border: none;
            font-weight: 600;
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
            padding: 12px;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            color: #333;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 7px 15px rgba(77, 148, 255, 0.3);
                background: linear-gradient(135deg, var(--cosmic-blue-light) 20%, var(--nebula-purple-light) 100%);
            }

            .btn-primary:active {
                transform: translateY(0);
            }

        .text-danger {
            color: #e74c3c !important;
            font-size: 0.85rem;
            margin-top: 0.3rem;
        }

        a {
            color: var(--cosmic-blue-light);
            text-decoration: none;
            transition: all 0.3s ease;
        }

            a:hover {
                color: #4d5b9e;
                text-shadow: 0 0 8px rgba(77, 148, 255, 0.5);
            }

        /* Password strength indicator */
        .password-strength {
            height: 5px;
            margin-top: 5px;
            border-radius: 3px;
            transition: all 0.3s ease;
        }

        .password-feedback {
            font-size: 0.8rem;
            margin-top: 5px;
            color: #555;
        }

        body::before {
            animation: twinkle 8s ease-in-out infinite;
        }
    </style>
</head>
<body>
    <!-- Space elements -->
    <div class="planet planet-1"></div>
    <div class="planet-ring"></div>
    <div class="planet planet-2"></div>

    <div class="registration-container">
        <div class="logo">AstroSafar</div>
        <div class="tagline">Begin your journey through the cosmos of knowledge</div>

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "registrationForm", @class = "needs-validation", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()

            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label" for="Firstname">First Name</label>
                        <input type="text" id="Firstname" class="form-control" required placeholder="Enter your first name" oninput="validateTextInput(event)">
                        <span id="FirstnameError" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label" for="Lastname">Last Name</label>
                        <input type="text" id="Lastname" class="form-control" required placeholder="Enter your last name" oninput="validateTextInput(event)">
                        <span id="LastnameError" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", type = "email", required = "required", placeholder = "youremail@example.com" })
                </div>
                <div class="invalid-feedback">Please enter a valid email address.</div>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>

         
            <div class="mb-3">
                @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-phone"></i></span>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", maxlength = "10", required = "required", placeholder = "10-digit mobile number", onkeypress = "return isNumberKey(event)" })
                </div>
                <div class="invalid-feedback">Please enter a valid 10-digit phone number (only numbers allowed).</div>
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3">
                @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput", required = "required", placeholder = "Choose a strong password" })
                    <button class="input-group-text toggle-password" type="button" id="togglePassword"><i class="fa fa-eye"></i></button>
                </div>
                <div class="password-strength" id="passwordStrength"></div>
                <div class="password-feedback" id="passwordFeedback"></div>
                <div class="invalid-feedback">Password is required.</div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", id = "confirmPasswordInput", required = "required", placeholder = "Confirm your password" })
                    <button class="input-group-text toggle-password" type="button" id="toggleConfirmPassword"><i class="fa fa-eye"></i></button>
                </div>
                <div class="invalid-feedback">Please confirm your password.</div>
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>

            <div class="mb-4">
                @Html.LabelFor(model => model.DateOfBirth, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                    @Html.TextBoxFor(model => model.DateOfBirth, new { @class = "form-control", type = "date", required = "required", id = "dobInput" })
                </div>
                <div class="invalid-feedback">Please enter your date of birth.</div>
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>



            <button type="submit" class="btn btn-primary w-100">LAUNCH YOUR JOURNEY</button>

            <div class="text-center mt-4">
                Already an explorer? <a asp-action="Login" asp-controller="Account">Sign In</a>
            </div>
        }
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
                document.addEventListener("DOMContentLoaded", function () {
                    // Form validation
                    const form = document.getElementById('registrationForm');

                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault();
                                     event.stopPropagation();
                        }

                        // Check if passwords match
                        const password = document.getElementById('passwordInput').value;
</script>
</body> *@