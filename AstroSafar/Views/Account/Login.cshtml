



 @model AstroSafar.Models.Registration

@{
    ViewData["Title"] = "Login";
    var returnUrl = Context.Request.Query["returnUrl"];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login | AstroSafar</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&family=Exo+2:wght@300;400;600&display=swap" rel="stylesheet">

    <style>
        :root {
            --space-light: #f0f5ff;
            --deep-sky: #e6f0ff;
            --nebula-purple-light: #c5b3dd;
            --cosmic-blue-light: #6699cc;
            --star-color: #4d94ff;
            --meteor-orange-light: #ff9966;
            --moon-silver: #e6e6e6;
            --planet-ring-light: rgba(102, 153, 204, 0.15);
        }

        body {
            background: linear-gradient(135deg, var(--space-light) 0%, var(--deep-sky) 100%);
            color: #333;
            font-family: 'Exo 2', sans-serif;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

            body::before {
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: radial-gradient(2px 2px at 40px 70px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(2px 2px at 20px 100px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 90px 40px, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 130px 80px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)), radial-gradient(1px 1px at 160px 120px, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0));
                background-repeat: repeat;
                background-size: 200px 200px;
                opacity: 0.3;
                z-index: -1;
            }

        .planet {
            position: absolute;
            border-radius: 50%;
            filter: blur(1px);
        }

        .planet-1 {
            width: 180px;
            height: 180px;
            background: radial-gradient(circle at 30% 40%, #a3c2f5, #d1e1fa);
            top: 10%;
            right: -60px;
            box-shadow: 0 0 40px rgba(77, 148, 255, 0.2);
        }

        .planet-2 {
            width: 100px;
            height: 100px;
            background: radial-gradient(circle at 30% 40%, #e5c1d5, #f2e1ec);
            bottom: 5%;
            left: -30px;
            box-shadow: 0 0 30px rgba(255, 153, 102, 0.2);
        }

        .planet-ring {
            position: absolute;
            width: 240px;
            height: 50px;
            border-radius: 50%;
            border: 8px solid var(--planet-ring-light);
            top: 60px;
            right: -90px;
            transform: rotate(-20deg);
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-weight: 700;
            font-size: 2.5rem;
            color: #4d5b9e;
            text-align: center;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 10px rgba(77, 148, 255, 0.7);
        }

        .tagline {
            text-align: center;
            color: #555;
            margin-bottom: 2rem;
        }

        .login-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 30px;
            border-radius: 16px;
            background-color: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(100, 100, 100, 0.15);
            border: 1px solid rgba(200, 200, 200, 0.3);
            position: relative;
            z-index: 10;
        }

        .form-label {
            font-weight: 600;
            color: #444;
            margin-bottom: 0.3rem;
        }

        .form-control {
            background-color: rgba(240, 245, 255, 0.6);
            color: #333;
            border: 1px solid rgba(102, 153, 204, 0.3);
            border-radius: 8px;
            transition: all 0.3s ease;
            padding: 10px 15px;
        }

            .form-control:focus {
                background-color: rgba(230, 240, 255, 0.7);
                color: #222;
                border-color: var(--star-color);
                box-shadow: 0 0 0 0.25rem rgba(77, 148, 255, 0.25);
            }

        .input-group-text {
            background-color: rgba(230, 240, 255, 0.7);
            border-color: rgba(102, 153, 204, 0.3);
            color: #444;
        }

        .toggle-password {
            cursor: pointer;
            background-color: transparent;
            border: none;
            color: #555;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--cosmic-blue-light) 0%, var(--nebula-purple-light) 100%);
            border: none;
            font-weight: 600;
            font-family: 'Orbitron', sans-serif;
            letter-spacing: 1px;
            padding: 12px;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            color: #333;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 7px 15px rgba(77, 148, 255, 0.3);
                background: linear-gradient(135deg, var(--cosmic-blue-light) 20%, var(--nebula-purple-light) 100%);
            }

            .btn-primary:active {
                transform: translateY(0);
            }

        .text-danger {
            color: #e74c3c !important;
            font-size: 0.85rem;
            margin-top: 0.3rem;
        }

        a {
            color: var(--cosmic-blue-light);
            text-decoration: none;
            transition: all 0.3s ease;
        }

            a:hover {
                color: #4d5b9e;
                text-shadow: 0 0 8px rgba(77, 148, 255, 0.5);
            }

        .form-check-input {
            background-color: rgba(240, 245, 255, 0.6);
            border: 1px solid rgba(102, 153, 204, 0.3);
        }

            .form-check-input:checked {
                background-color: var(--cosmic-blue-light);
                border-color: var(--cosmic-blue-light);
            }

            .form-check-input:focus {
                box-shadow: 0 0 0 0.25rem rgba(77, 148, 255, 0.25);
            }

        .form-check-label {
            color: #555;
            font-size: 0.9rem;
        }

        body::before {
            animation: twinkle 8s ease-in-out infinite;
        }

        @@keyframes twinkle {
            0%, 100% {
                opacity: 0.3;
            }

            50% {
                opacity: 0.4;
            }
        }
    </style>
</head>
<body>
    <div class="planet planet-1"></div>
    <div class="planet-ring"></div>
    <div class="planet planet-2"></div>

    <div class="login-container">
        <div class="logo">AstroSafar</div>
        <div class="tagline">Begin your journey through the cosmos of knowledge</div>
        <h2>Login to AstroSafar</h2>
        <form asp-action="Login" method="post">
            <input type="hidden" name="returnUrl" value="@Context.Request.Query["returnUrl"]" />

            <div class="mb-3">
                @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control border bg-white text-dark", type = "email", required = "required", placeholder = "youremail@example.com" })
                </div>
                <div class="invalid-feedback">Please enter a valid email address.</div>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-lock"></i></span>
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput", required = "required", placeholder = "Enter your password" })
                    <button class="input-group-text toggle-password" type="button" id="togglePassword"><i class="fa fa-eye"></i></button>
                </div>
                <div class="invalid-feedback">Password is required.</div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>

            <div class="text-center mt-4">
                <input type="submit" value="Login" class="btn btn-primary" />
            </div>
            <div class="text-center mt-3">
                <a href="#" class="text-decoration-none">
                    <i class="fas fa-question-circle me-1"></i> Forgot Password?
                </a>
            </div>
            <div class="footer-text">
                <div class="text-center mt-4">
                    Don't have an account? <a href="@Url.Action("Register", "Account")">Sign Up</a>
                </div>
            </div>
        </form>
    </div>

    <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function () {
            let passwordInput = document.getElementById('passwordInput');
            let type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
            this.innerHTML = type === 'password' ? '<i class="fa fa-eye"></i>' : '<i class="fa fa-eye-slash"></i>';
        });

        // Check for saved credentials on page load
        document.addEventListener('DOMContentLoaded', function () {
            if (localStorage.getItem('rememberMe') === 'true') {
                document.getElementById('rememberMe').checked = true;
                const savedEmail = localStorage.getItem('savedEmail');
                if (savedEmail) {
                    document.querySelector('input[name="Email"]').value = savedEmail;
                }
            }
        });

        // Save credentials if "Remember me" is checked
        document.querySelector('form').addEventListener('submit', function () {
            const rememberMe = document.getElementById('rememberMe').checked;
            localStorage.setItem('rememberMe', rememberMe);

            if (rememberMe) {
                localStorage.setItem('savedEmail', document.querySelector('input[name="Email"]').value);
            } else {
                localStorage.removeItem('savedEmail');
            }
        });
    </script>
</body>
</html>