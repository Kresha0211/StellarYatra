@*  @{
     ViewData["Title"] = "Home Page";
 }

  @* <div class="text-center">
      <h1 class="display-4">Welcome</h1>
      <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
  </div>

  <script>
      window.onload = function() {
          document.querySelector('.registration-container').classList.add('show');
      }
  </script> *@


 @* <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Home</title>
     <style>
         body {
             font-family: 'Poppins', sans-serif;
             background-color: #0b0c10;
             color: white;
             text-align: center;
         }

         .space-container {
             position: relative;
             max-width: 100%;
             height: 80vh;
             overflow: hidden;
         }

             .space-container img {
                 width: 100%;
                 height: 100%;
                 object-fit: cover;
                 opacity: 0.9;
             }

         .overlay-text {
             position: absolute;
             top: 50%;
             left: 50%;
             transform: translate(-50%, -50%);
             background: rgba(0, 0, 0, 0.6);
             padding: 20px;
             border-radius: 10px;
             font-size: 24px;
             font-weight: bold;
         }
     </style>
 </head>
 <body>

     <div class="space-container">
         <img src="~/Image/4965.jpg" alt="Space Image">
         <div class="overlay-text">Welcome to AstroSafar - Explore the Universe!</div>
     </div>

 </body>
 </html>
  *@






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AstroSafar - Space Animation</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            width: 100%;
            height: 100%;
            background-color: #000;
            font-family: Arial, sans-serif;
        }

        #scene-container {
            width: 100%;
            height: 100%;
            position: relative;
        }

        #overlay-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #ffffff;
            font-size: 4em;
            text-align: center;
            pointer-events: none;
            z-index: 1;
        }
    </style>
</head>
<body>
    <div id="scene-container">
        <div id="overlay-text">Welcome to AstroSafar</div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(
            75,
            window.innerWidth / window.innerHeight,
            0.1,
            1000
        );
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('scene-container').appendChild(renderer.domElement);

        // Load textures
        const textureLoader = new THREE.TextureLoader();
        const earthTexture = textureLoader.load('https://threejs.org/examples/textures/earth_atmos_2048.jpg');
        const marsTexture = textureLoader.load('https://threejs.org/examples/textures/mars_1k_color.jpg');

        // Create Earth
        // const earthGeometry = new THREE.SphereGeometry(1, 32, 32);
        // const earthMaterial = new THREE.MeshStandardMaterial({ map: earthTexture });
        // const earth = new THREE.Mesh(earthGeometry, earthMaterial);
        // scene.add(earth);

        const earthGeometry = new THREE.SphereGeometry(1, 32, 32);
        const earthMaterial = new THREE.MeshStandardMaterial({
            map: earthTexture,
            color: 0xffffff, // Set to white so the texture shows fully
            emissive: 0x002244, // A subtle blue glow
            roughness: 0.8, // Adjust for desired shininess
            metalness: 0.0
        });
        const earth = new THREE.Mesh(earthGeometry, earthMaterial);
        scene.add(earth);

        // Create Mars
        // const marsGeometry = new THREE.SphereGeometry(0.53, 32, 32); // Mars is about 53% the size of Earth
        // const marsMaterial = new THREE.MeshStandardMaterial({ map: marsTexture });
        // const mars = new THREE.Mesh(marsGeometry, marsMaterial);
        // scene.add(mars);
        const marsGeometry = new THREE.SphereGeometry(0.53, 32, 32); // Mars is about 53% the size of Earth
        const marsMaterial = new THREE.MeshStandardMaterial({
            map: marsTexture,
            color: 0xffffff, // Set to white so the texture shows fully
            emissive: 0x442200, // A subtle reddish glow
            roughness: 0.9, // Adjust for desired shininess
            metalness: 0.0
        });
        const mars = new THREE.Mesh(marsGeometry, marsMaterial);
        scene.add(mars);

        // Add lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);

        const pointLight = new THREE.PointLight(0xffffff, 1);
        pointLight.position.set(5, 3, 5);
        scene.add(pointLight);

        // Create starfield
        const starGeometry = new THREE.BufferGeometry();
        const starCount = 5000;
        const starVertices = [];
        for (let i = 0; i < starCount; i++) {
            const x = THREE.MathUtils.randFloatSpread(2000);
            const y = THREE.MathUtils.randFloatSpread(2000);
            const z = THREE.MathUtils.randFloatSpread(2000);
            starVertices.push(x, y, z);
        }
        starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
        const starMaterial = new THREE.PointsMaterial({ color: 0xffd700, size: 5, transparent: true });
        const stars = new THREE.Points(starGeometry, starMaterial);
        scene.add(stars);

        camera.position.z = 5;

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            earth.rotation.y += 0.001; // Rotate the Earth
            mars.rotation.y += 0.001; // Rotate Mars

            // Orbit Mars around Earth
            const time = Date.now() * 0.001;
            mars.position.set(
                Math.cos(time) * 3, // 3 units away from Earth
                0,
                Math.sin(time) * 3
            );

            stars.rotation.y += 0.0005; // Rotate the starfield for a dynamic effect

            // Twinkling effect
            starMaterial.opacity = 0.5 + Math.sin(time * 5) * 0.5;

            renderer.render(scene, camera);
        }
        animate();

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>


<<<<<<< HEAD
=======
</p>

>>>>>>> f65db38fad01506a234e20b2029a47459529071c
