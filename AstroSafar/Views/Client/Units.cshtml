 @model IEnumerable<AstroSafar.Models.UnitAdmin>
@{
    var firstUnit = Model.FirstOrDefault();
    var courseId = firstUnit?.CourseId ?? 0;
}

<div class="course-container">
    <!-- Hidden field to store course ID -->
    <input type="hidden" id="courseId" value="@courseId" />

    <h2 class="mb-4">ðŸš€ Progress Tracker</h2>

    <!-- Overall Course Progress -->
    <div class="progress-container mb-4">
        <div id="overallProgress" class="progress-bar" style="width: 0%;">0%</div>
    </div>

    <!-- Search Input -->
    <input type="text" id="searchInput" class="form-control mb-3" placeholder="Search units..." onkeyup="filterUnits()" />

    <div class="accordion" id="unitAccordion">
        @foreach (var unit in Model)
        {
            var unitId = "unit" + unit.Id;
            <div class="accordion-item unit" data-title="@unit.Name.ToLower() @unit.Content.ToLower()">
                <h2 class="accordion-header" id="heading-@unitId">
                    <button class="accordion-button collapsed unit-title" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapse-@unitId" aria-expanded="false" aria-controls="collapse-@unitId">
                        ðŸ“– <span class="unit-name">@unit.Name</span>
                    </button>
                </h2>
                <div id="collapse-@unitId" class="accordion-collapse collapse" aria-labelledby="heading-@unitId"
                     data-bs-parent="#unitAccordion">
                    <div class="accordion-body">
                        @if (!string.IsNullOrEmpty(unit.ImageURL))
                        {
                            <img src="@unit.ImageURL" alt="Unit Image" class="unit-image img-fluid mb-3" />
                        }

                        @if (!string.IsNullOrEmpty(unit.Content))
                        {
                            <div class="unit-content">
                                @Html.Raw(unit.Content.Replace("\n", "<br />"))
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(unit.VideoUrl))
                        {
                            <div class="video-container mt-3">
                                <a href="@unit.VideoUrl" target="_blank" class="btn btn-primary btn-sm">
                                    <i class="fas fa-play"></i> Watch Video
                                </a>
                            </div>
                        }

                        <!-- Mark as Completed Checkbox -->
                        <div class="form-check mt-3">
                            <input class="form-check-input unit-checkbox" type="checkbox"
                                   id="unitDone-@unit.Id" data-unit-id="@unit.Id">
                            <label class="form-check-label" for="unitDone-@unit.Id">
                                <i class="far fa-check-circle"></i> Mark as Completed
                            </label>
                        </div>

                        <!-- Unit Progress Display -->
                        <div id="progress-@unit.Id" class="text-success mt-2 unit-progress small"></div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- View Progress Button -->
    <button id="viewProgress" class="btn btn-primary mt-4" disabled>
        <i class="fas fa-chart-line"></i> View Progress Report
    </button>

    <!-- Validation Message Placeholder -->
    <div id="validationMessageContainer" class="mt-3"></div>
</div>

<style>
    .course-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .progress-container {
        width: 100%;
        background-color: #e9ecef;
        border-radius: 10px;
        padding: 3px;
        margin-bottom: 20px;
    }

    .progress-bar {
        height: 24px;
        background-color: #28a745;
        border-radius: 8px;
        transition: width 0.5s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 0.9rem;
    }

    .unit-progress {
        font-weight: 500;
    }

    .unit-image {
        max-height: 200px;
        object-fit: contain;
        border-radius: 5px;
    }

    .accordion-button:not(.collapsed) {
        background-color: #f1f8ff;
        color: #0d6efd;
    }
</style>

<script>
    // Constants
    const PROGRESS_THRESHOLD = 65;
    let TOTAL_UNITS = @Model.Count();
    let UNIT_PROGRESS_VALUE = TOTAL_UNITS > 0 ? (100 / TOTAL_UNITS) : 0;

    class ProgressTracker {
        constructor() {
            this.courseId = document.getElementById('courseId').value;
            this.completedUnits = new Set();
            this.courseProgress = 0;
            this.initialize();
        }

        async initialize() {
            await this.loadInitialProgress();
            this.setupEventListeners();
        }

        async loadInitialProgress() {
            try {
                const response = await fetch(`/Client/GetUserProgress?courseId=${this.courseId}`);
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                if (data.success) {
                    // Update completed units
                    data.completedUnitIds.forEach(id => {
                        this.completedUnits.add(id.toString());
                        const checkbox = document.querySelector(`.unit-checkbox[data-unit-id="${id}"]`);
                        if (checkbox) checkbox.checked = true;
                    });

                    // Update progress display
                    this.courseProgress = data.courseProgress;
                    this.updateProgressDisplay();
                }
            } catch (error) {
                console.error('Failed to load initial progress:', error);
                this.showMessage('Failed to load your progress. Please refresh the page.', 'danger');
            }
        }

        setupEventListeners() {
            // Checkbox changes
            document.querySelectorAll('.unit-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', async (e) => {
                    const unitId = e.target.dataset.unitId;
                    await this.updateUnitCompletion(unitId, e.target.checked);
                });
            });

            // View progress button
            document.getElementById('viewProgress').addEventListener('click', () => {
                this.redirectToProgress();
            });
        }

        async updateUnitCompletion(unitId, isCompleted) {
            try {
                const response = await fetch('/Client/UpdateProgress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        CourseId: parseInt(this.courseId),
                        UnitId: parseInt(unitId),
                        IsCompleted: isCompleted
                    })
                });

                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                if (data.success) {
                    // Update local state
                    if (isCompleted) {
                        this.completedUnits.add(unitId);
                    } else {
                        this.completedUnits.delete(unitId);
                    }

                    // Update course progress
                    this.courseProgress = data.courseProgress;
                    this.updateProgressDisplay();
                }
            } catch (error) {
                console.error('Failed to update progress:', error);
                this.showMessage('Failed to save your progress. Please try again.', 'danger');
            }
        }

        updateProgressDisplay() {
            // Update progress bar
            const progressBar = document.getElementById('overallProgress');
            progressBar.style.width = `${this.courseProgress}%`;
            progressBar.textContent = `${this.courseProgress.toFixed(1)}%`;

            // Update individual unit progress indicators
            document.querySelectorAll('.unit-checkbox').forEach(checkbox => {
                const unitId = checkbox.dataset.unitId;
                const progressElement = document.getElementById(`progress-${unitId}`);

                if (checkbox.checked) {
                    progressElement.innerHTML = `<i class="fas fa-check-circle"></i> Completed (${UNIT_PROGRESS_VALUE.toFixed(1)}%)`;
                } else {
                    progressElement.innerHTML = '';
                }
            });

            // Update view progress button
            this.updateViewProgressButton();
        }

        updateViewProgressButton() {
            const button = document.getElementById('viewProgress');
            if (this.courseProgress >= PROGRESS_THRESHOLD) {
                button.disabled = false;
                button.classList.remove('btn-secondary');
                button.classList.add('btn-primary');
                button.title = 'View your progress report';
            } else {
                button.disabled = true;
                button.classList.remove('btn-primary');
                button.classList.add('btn-secondary');
                button.title = `Complete ${PROGRESS_THRESHOLD}% of the course to view progress`;
            }
        }

        redirectToProgress() {
            if (this.courseProgress < PROGRESS_THRESHOLD) {
                this.showMessage(
                    `You need to complete at least ${PROGRESS_THRESHOLD}% of the course to view your progress report.`,
                    'warning'
                );
                return;
            }

            // Store progress in session and redirect
            localStorage.setItem('courseProgress', this.courseProgress.toFixed(1));
            window.location.href = `/Client/ExamProgress?courseId=${this.courseId}`;
        }

        showMessage(message, type = 'info') {
            const container = document.getElementById('validationMessageContainer');
            container.innerHTML = `
                    <div class="alert alert-${type} alert-dismissible fade show">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        }
    }

    // Search functionality
    function filterUnits() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        document.querySelectorAll('.unit').forEach(unit => {
            const title = unit.getAttribute('data-title');
            unit.style.display = title.includes(searchTerm) ? 'block' : 'none';
        });
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        new ProgressTracker();
    });


</script>