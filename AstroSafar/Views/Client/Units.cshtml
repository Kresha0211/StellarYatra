
@model IEnumerable<AstroSafar.Models.UnitAdmin>
@{
    var firstUnit = Model.FirstOrDefault();
    var courseId = firstUnit?.CourseId ?? 0;
}

<div class="course-container">
    <input type="hidden" id="courseId" value="@courseId" />

    <h2 class="mb-4 text-center fw-bold">ðŸš€ Progress Tracker</h2>

    <!-- Enhanced Search Bar with Icon -->
    <div class="input-group mb-4">
        <span class="input-group-text">
            <i class="fas fa-search"></i>
        </span>
        <input type="text" id="searchInput" class="form-control" placeholder="Search units..." onkeyup="filterUnits()" />
    </div>

    <!-- Progress Card -->
    <div class="card shadow-sm mb-4 border-0">
        <div class="card-body p-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="mb-0 fw-bold">Your Course Progress</h6>
                <span id="progressPercentage" class="badge bg-primary">0%</span>
            </div>
            <div class="progress-container">
                <div id="overallProgress" class="progress-bar" style="width: 0%;"></div>
            </div>
            <small class="text-muted d-block mt-2">
                Completeto unlock progress report
            </small>
        </div>
    </div>

    <div class="accordion" id="unitAccordion">
        @foreach (var unit in Model)
        {
            var unitId = "unit" + unit.Id;

            <div class="accordion-item unit mb-3 border-0 shadow-sm" data-title="@unit.Name.ToLower() @unit.Content.ToLower()">
                <h2 class="accordion-header" id="heading-@unitId">
                    <button class="accordion-button collapsed unit-title" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapse-@unitId" aria-expanded="false" aria-controls="collapse-@unitId">
                        <i class="fas fa-book-open me-2 text-primary"></i>
                        <span class="unit-name fw-semibold">@unit.Name</span>
                        <span id="unitStatus-@unit.Id" class="badge ms-auto bg-success opacity-0">Completed</span>
                    </button>
                </h2>
                <div id="collapse-@unitId" class="accordion-collapse collapse" aria-labelledby="heading-@unitId"
                     data-bs-parent="#unitAccordion">
                    <div class="accordion-body">
                        @if (!string.IsNullOrEmpty(unit.ImageURL))
                        {
                            <img src="@unit.ImageURL" alt="Unit Image" class="unit-image img-fluid mb-3 rounded" />
                        }

                        @if (!string.IsNullOrEmpty(unit.Content))
                        {
                            <div class="unit-content mb-3 p-3 rounded bg-light border">
                                @Html.Raw(unit.Content.Replace("\n", "<br />"))
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(unit.VideoUrl))
                        {
                            <div class="video-container mb-3">
                                <a href="@unit.VideoUrl" class="btn btn-outline-primary watch-video-btn w-100"
                                   target="_blank"
                                   data-unit-id="@unit.Id">
                                    <i class="fab fa-youtube me-2"></i> Watch Video on YouTube
                                </a>
                                <small class="text-muted d-block mt-2">
                                    <i class="fas fa-info-circle me-1"></i> Return to this page after watching to mark as completed
                                </small>
                            </div>
                        }

                        <div class="form-check mt-3">
                            <input class="form-check-input unit-checkbox" type="checkbox"
                                   id="unitDone-@unit.Id" data-unit-id="@unit.Id" disabled>
                            <label class="form-check-label" for="unitDone-@unit.Id">
                                <i class="far fa-check-circle me-1"></i> Mark as Completed
                            </label>
                        </div>

                        <div id="progress-@unit.Id" class="text-success mt-2 unit-progress small"></div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="d-grid gap-2 mt-4">
        <button id="viewProgress" class="btn btn-primary" disabled>
            <i class="fas fa-chart-line me-2"></i> View Progress Report
        </button>
    </div>

    <div id="validationMessageContainer" class="mt-3"></div>
</div>

<style>
    :root {
        --space-bg: #f2f7ff;
        --card-bg: #ffffff;
        --primary-blue: #3a7bd5;
        --cosmic-green: #28a745;
        --glow-effect: rgba(58, 123, 213, 0.15);
        --card-radius: 16px;
        --text-dark: #222;
        --text-light: #777;
        --highlight-color: #fff8d8;
        --progress-bar: #3a7bd5;
    }

    body {
        background: var(--space-bg);
        font-family: 'Poppins', sans-serif;
        color: var(--text-dark);
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        margin: 0;
        padding: 0;
    }
    .main-content {
        flex: 1;
        padding: 2rem 0;
    }

    .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 0 15px;
    }

    footer {
        background-color: var(--primary-blue);
        color: white;
        padding: 1rem 0;
        margin-top: auto;
    }

    h2 {
        color: var(--primary-blue);
        font-weight: 700;
        text-align: center;
        margin-bottom: 2rem;
    }

    .progress-summary-card {
        background: var(--card-bg);
        border-radius: var(--card-radius);
        padding: 1.5rem;
        box-shadow: 0 6px 12px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
    }

    .progress-container {
        width: 100%;
        background-color: #e9ecef;
        border-radius: 10px;
        height: 12px;
        margin: 0.5rem 0;
    }

    .progress-bar {
        height: 100%;
        background-color: var(--progress-bar);
        border-radius: 10px;
        transition: width 0.5s ease;
    }

    .unit-card {
        background: var(--card-bg);
        border-radius: var(--card-radius);
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        padding: 1.5rem;
        margin-bottom: 1rem;
    }

    .unit-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .unit-name {
        color: var(--primary-blue);
        font-weight: 600;
    }

    .unit-status {
        background-color: var(--cosmic-green);
    }

    .input-group {
        margin-bottom: 2rem;
        box-shadow: 0 6px 12px rgba(0,0,0,0.05);
        border-radius: 8px;
        overflow: hidden;
    }

    .input-group-text {
        background-color: var(--primary-blue);
        color: white;
        border: none;
    }

    .btn-primary {
        background-color: var(--primary-blue);
        border-color: var(--primary-blue);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--primary-blue);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }
</style>
<script>
    const PROGRESS_THRESHOLD = 65;
    let TOTAL_UNITS = @Model.Count();
    let UNIT_PROGRESS_VALUE = TOTAL_UNITS > 0 ? (100 / TOTAL_UNITS) : 0;

    class ProgressTracker {
        constructor() {
            this.courseId = document.getElementById('courseId').value;
            this.completedUnits = new Set();
            this.courseProgress = 0;
            this.initialize();
        }

        async initialize() {
            await this.loadInitialProgress();
            this.setupEventListeners();
        }

        async loadInitialProgress() {
            try {
                const response = await fetch(`/Client/GetUserProgress?courseId=${this.courseId}`);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                if (data.success) {
                    data.completedUnitIds.forEach(id => {
                        this.completedUnits.add(id.toString());
                        const checkbox = document.querySelector(`.unit-checkbox[data-unit-id="${id}"]`);
                        if (checkbox) {
                            checkbox.checked = true;
                            checkbox.disabled = false;
                            this.updateUnitStatusDisplay(id, true);
                        }
                    });
                    this.courseProgress = data.courseProgress;
                    this.updateProgressDisplay();
                }
            } catch (error) {
                console.error('Failed to load initial progress:', error);
                this.showMessage('Failed to load your progress. Please refresh the page.', 'danger');
            }
        }

        setupEventListeners() {
            document.querySelectorAll('.unit-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', async (e) => {
                    const unitId = e.target.dataset.unitId;
                    await this.updateUnitCompletion(unitId, e.target.checked);
                });
            });

            document.getElementById('viewProgress').addEventListener('click', () => {
                this.redirectToProgress();
            });
        }

        updateUnitStatusDisplay(unitId, isCompleted) {
            const statusBadge = document.getElementById(`unitStatus-${unitId}`);
            if (statusBadge) {
                statusBadge.classList.toggle('opacity-0', !isCompleted);
            }
        }

        async updateUnitCompletion(unitId, isCompleted) {
            try {
                const response = await fetch('/Client/UpdateProgress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        CourseId: parseInt(this.courseId),
                        UnitId: parseInt(unitId),
                        IsCompleted: isCompleted
                    })
                });

                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();

                if (data.success) {
                    if (isCompleted) {
                        this.completedUnits.add(unitId);
                    } else {
                        this.completedUnits.delete(unitId);
                    }

                    this.courseProgress = data.courseProgress;
                    this.updateProgressDisplay();
                    this.updateUnitStatusDisplay(unitId, isCompleted);
                }
            } catch (error) {
                console.error('Failed to update progress:', error);
                this.showMessage('Failed to save your progress. Please try again.', 'danger');
            }
        }

        updateProgressDisplay() {
            const progressBar = document.getElementById('overallProgress');
            const progressPercentage = document.getElementById('progressPercentage');

            progressBar.style.width = `${this.courseProgress}%`;
            progressPercentage.textContent = `${this.courseProgress.toFixed(1)}%`;

            document.querySelectorAll('.unit-checkbox').forEach(checkbox => {
                const unitId = checkbox.dataset.unitId;
                const progressElement = document.getElementById(`progress-${unitId}`);
                if (checkbox.checked) {
                    progressElement.innerHTML = `<i class="fas fa-check-circle"></i> Completed (${UNIT_PROGRESS_VALUE.toFixed(1)}%)`;
                } else {
                    progressElement.innerHTML = '';
                }
            });

            this.updateViewProgressButton();
        }

        updateViewProgressButton() {
            const button = document.getElementById('viewProgress');
            if (this.courseProgress >= PROGRESS_THRESHOLD) {
                button.disabled = false;
                button.classList.remove('btn-secondary');
                button.classList.add('btn-primary');
                button.title = 'View your progress report';
            } else {
                button.disabled = true;
                button.classList.remove('btn-primary');
                button.classList.add('btn-secondary');
                button.title = `Complete ${PROGRESS_THRESHOLD}% of the course to view progress`;
            }
        }

        redirectToProgress() {
            if (this.courseProgress < PROGRESS_THRESHOLD) {
                this.showMessage(`You need to complete at least ${PROGRESS_THRESHOLD}% of the course to view your progress report.`, 'warning');
                return;
            }
            localStorage.setItem('courseProgress', this.courseProgress.toFixed(1));
            window.location.href = `/Client/ExamProgress?courseId=${this.courseId}`;
        }

        showMessage(message, type = 'info') {
            const container = document.getElementById('validationMessageContainer');
            container.innerHTML = `
                        <div class="alert alert-${type} alert-dismissible fade show">
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        new ProgressTracker();
    });

    function filterUnits() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        let hasResults = false;

        document.querySelectorAll('.unit').forEach(unit => {
            const title = unit.getAttribute('data-title');
            const isMatch = title.includes(searchTerm);
            unit.style.display = isMatch ? 'block' : 'none';

            if (isMatch) {
                hasResults = true;
                // Highlight matching text
                const unitName = unit.querySelector('.unit-name');
                if (unitName && searchTerm) {
                    const regex = new RegExp(`(${searchTerm})`, 'gi');
                    unitName.innerHTML = unitName.textContent.replace(regex, '<span class="highlight">$1</span>');
                }
            }
        });

        // Show message if no results found
        const noResultsMsg = document.getElementById('noResults');
        if (noResultsMsg) {
            noResultsMsg.style.display = hasResults ? 'none' : 'block';
        }
    }

    // Watch Video + Enable Checkbox Logic
    let lastWatchedUnit = null;

    document.addEventListener('click', function (e) {
        if (e.target && e.target.classList.contains('watch-video-btn')) {
            const unitId = e.target.dataset.unitId;
            localStorage.setItem('lastWatchedUnit', unitId);
            lastWatchedUnit = unitId;
        }
    });

    window.addEventListener('focus', function () {
        const unitId = localStorage.getItem('lastWatchedUnit');
        if (unitId) {
            const checkbox = document.getElementById(`unitDone-${unitId}`);
            if (checkbox && !checkbox.checked) {
                checkbox.disabled = false;
                checkbox.classList.add('border-success');
                document.getElementById(`progress-${unitId}`).innerHTML =
                    `<i class="fas fa-clock"></i> Returned after watching - please check when done.`;
            }
        }
    });
</script>